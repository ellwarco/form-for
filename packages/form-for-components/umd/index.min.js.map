{"version":3,"file":"index.min.js","sources":["../src/Checkbox.js","../src/Input.js","../src/Radio.js","../src/Select.js","../src/index.js"],"sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport type { ComponentProps } from 'form-for';\n\nexport default class Checkbox extends React.PureComponent<ComponentProps> {\n  input: ?HTMLInputElement;\n\n  componentDidMount() {\n    this.props.onMount(this.input);\n  }\n\n  render() {\n    const { error, value, ...props } = { ...this.props };\n    delete props.onMount;\n    delete props.touched;\n\n    return <input ref={el => (this.input = el)} {...props} checked={!!value} aria-invalid={!!error} type=\"checkbox\" />;\n  }\n}\n","// @flow\n\nimport * as React from 'react';\nimport type { ComponentProps } from 'form-for';\n\nexport default class Input extends React.PureComponent<ComponentProps> {\n  input: ?HTMLInputElement;\n\n  componentDidMount() {\n    this.props.onMount(this.input);\n  }\n\n  render() {\n    const { error, ...props } = { ...this.props };\n    delete props.onMount;\n    delete props.touched;\n\n    return <input ref={el => (this.input = el)} aria-invalid={!!error} {...props} />;\n  }\n}\n","// @flow\n\nimport * as React from 'react';\nimport type { ComponentProps } from 'form-for';\n\nexport type Props = {\n  options: { [key: string]: string },\n  map?: Function\n} & ComponentProps;\n\nexport default class Radio extends React.PureComponent<Props> {\n  input: ?HTMLInputElement;\n\n  getInputProps(value: string) {\n    const { error, options, map, ...props } = this.props;\n    delete props.onMount;\n    delete props.touched;\n\n    const checked = value === props.value;\n    return { ...props, checked, 'aria-invalid': error, value, type: 'radio' };\n  }\n\n  componentDidMount() {\n    this.props.onMount(this.input);\n  }\n\n  render() {\n    const { options } = this.props;\n    return Object.keys(options).map(key => this.mapInput(key, options[key]));\n  }\n\n  mapInput(value: string, label: any) {\n    const inputProps = this.getInputProps(value);\n    if (this.props.map) return this.props.map(inputProps, label);\n\n    return (\n      <span key={value}>\n        <input {...inputProps} /> {label}\n      </span>\n    );\n  }\n}\n","// @flow\n\nimport * as React from 'react';\nimport type { ComponentProps } from 'form-for';\n\nexport type Props = {\n  options: { [key: any]: any },\n  placeholder?: string,\n  required?: boolean\n} & ComponentProps;\n\nexport default class SelectInput extends React.PureComponent<Props> {\n  select: ?HTMLSelectElement;\n\n  componentDidMount() {\n    this.props.onMount(this.select);\n  }\n\n  render() {\n    const { error, options, ...props } = { ...this.props };\n    delete props.onMount;\n    delete props.touched;\n    delete props.type;\n\n    return (\n      <select ref={el => (this.select = el)} aria-invalid={error} {...props}>\n        {this.renderDefaultOption()}\n\n        {Object.keys(options).map(key => (\n          <option key={key} value={key}>\n            {options[key]}\n          </option>\n        ))}\n      </select>\n    );\n  }\n\n  renderDefaultOption() {\n    const { placeholder, required, value } = this.props;\n    if (placeholder === false || (required && value)) return null;\n\n    return <option value=\"\">{placeholder || '---'}</option>;\n  }\n}\n","// @flow\n\nimport { Field } from 'form-for';\n\nimport Checkbox from './Checkbox';\nimport Input from './Input';\nimport Radio from './Radio';\nexport type { Props as RadioProps } from './Radio';\nimport Select from './Select';\nexport type { Props as SelectProps } from './Select';\n\nconst inputTypes = [\n  'color',\n  'date',\n  'datetime-local',\n  'email',\n  'file',\n  'hidden',\n  'image',\n  'month',\n  'number',\n  'password',\n  'range',\n  'search',\n  'tel',\n  'text',\n  'time',\n  'url',\n  'week'\n];\n\nfunction connectFields() {\n  Field.connect('checkbox', Checkbox);\n  Field.connect('radio', Radio);\n  Field.connect('select', Select);\n  inputTypes.forEach(type => Field.connect(type, Input));\n}\n\nexport { connectFields, inputTypes, Checkbox, Input, Radio, Select };\n"],"names":["Checkbox","props","onMount","this","input","error","value","touched","React.createElement","ref","_this2","el","checked","aria-invalid","type","React","Input","Radio","options","map","Object","keys","mapInput","key","label","inputProps","getInputProps","SelectInput","select","renderDefaultOption","placeholder","required","inputTypes","connect","Select","forEach","Field"],"mappings":"82CAKqBA,oLAIZC,MAAMC,QAAQC,KAAKC,0DAIgBD,KAAKF,OAArCI,IAAAA,MAAOC,IAAAA,MAAUL,uCAClBA,EAAMC,eACND,EAAMM,QAENC,2BAAOC,IAAK,mBAAOC,EAAKN,MAAQO,IAASV,GAAOW,UAAWN,EAAOO,iBAAgBR,EAAOS,KAAK,qBAZnEC,iBCAjBC,oLAIZf,MAAMC,QAAQC,KAAKC,0DAISD,KAAKF,OAA9BI,IAAAA,MAAUJ,+BACXA,EAAMC,eACND,EAAMM,QAENC,2BAAOC,IAAK,mBAAOC,EAAKN,MAAQO,GAAKE,iBAAgBR,GAAWJ,WAZxCc,iBCKdE,yKAGLX,SAC8BH,KAAKF,MAAvCI,IAAAA,MAAwBJ,KAAjBiB,UAASC,2CACjBlB,EAAMC,eACND,EAAMM,YAEPK,EAAUN,IAAUL,EAAMK,kBACpBL,GAAOW,UAASC,eAAgBR,EAAOC,QAAOQ,KAAM,2DAI3Db,MAAMC,QAAQC,KAAKC,mDAIhBc,EAAYf,KAAKF,MAAjBiB,eACDE,OAAOC,KAAKH,GAASC,IAAI,mBAAOT,EAAKY,SAASC,EAAKL,EAAQK,uCAG3DjB,EAAekB,OAChBC,EAAatB,KAAKuB,cAAcpB,UAClCH,KAAKF,MAAMkB,IAAYhB,KAAKF,MAAMkB,IAAIM,EAAYD,GAGpDhB,wBAAMe,IAAKjB,2BACEmB,iBA3BgBV,iBCCdY,oLAIZ1B,MAAMC,QAAQC,KAAKyB,2DAIkBzB,KAAKF,OAAvCI,IAAAA,MAAOa,IAAAA,QAAYjB,yCACpBA,EAAMC,eACND,EAAMM,eACNN,EAAMa,KAGXN,4BAAQC,IAAK,mBAAOC,EAAKkB,OAASjB,GAAKE,eAAcR,GAAWJ,QACxD4B,6BAEER,KAAKH,GAASC,IAAI,mBACxBX,0BAAQe,IAAKA,EAAKjB,MAAOiB,KACdA,2DAQwBpB,KAAKF,MAAtC6B,IAAAA,YAAaC,IAAAA,SAAUzB,IAAAA,aACX,IAAhBwB,GAA0BC,GAAYzB,EAAe,KAElDE,0BAAQF,MAAM,OAAmB,cA9BHS,iBCAnCiB,GACJ,QACA,OACA,iBACA,QACA,OACA,SACA,QACA,QACA,SACA,WACA,QACA,SACA,MACA,OACA,OACA,MACA,wBAGF,mBACQC,QAAQ,WAAYjC,WACpBiC,QAAQ,QAAShB,WACjBgB,QAAQ,SAAUC,KACbC,QAAQ,mBAAQC,QAAMH,QAAQnB,EAAME"}