!(function(t, e) {
  'object' == typeof exports && 'undefined' != typeof module
    ? e(exports, require('react'), require('prop-types'))
    : 'function' == typeof define && define.amd
      ? define(['exports', 'react', 'prop-types'], e)
      : e((t['form-for'] = {}), t.react, t.prop_types);
})(this, function(t, e, n) {
  'use strict';
  n = n && n.hasOwnProperty('default') ? n.default : n;
  var r = function(t, e) {
      if (!(t instanceof e)) throw new TypeError('Cannot call a class as a function');
    },
    o = (function() {
      function t(t, e) {
        for (var n = 0; n < e.length; n++) {
          var r = e[n];
          (r.enumerable = r.enumerable || !1),
            (r.configurable = !0),
            'value' in r && (r.writable = !0),
            Object.defineProperty(t, r.key, r);
        }
      }
      return function(e, n, r) {
        return n && t(e.prototype, n), r && t(e, r), e;
      };
    })(),
    i = function(t, e, n) {
      return (
        e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : (t[e] = n),
        t
      );
    },
    a =
      Object.assign ||
      function(t) {
        for (var e = 1; e < arguments.length; e++) {
          var n = arguments[e];
          for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);
        }
        return t;
      },
    c = function(t, e) {
      if ('function' != typeof e && null !== e)
        throw new TypeError('Super expression must either be null or a function, not ' + typeof e);
      (t.prototype = Object.create(e && e.prototype, {
        constructor: { value: t, enumerable: !1, writable: !0, configurable: !0 }
      })),
        e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : (t.__proto__ = e));
    },
    s = function(t, e) {
      if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      return !e || ('object' != typeof e && 'function' != typeof e) ? t : e;
    },
    u = function(t) {
      if (Array.isArray(t)) {
        for (var e = 0, n = Array(t.length); e < t.length; e++) n[e] = t[e];
        return n;
      }
      return Array.from(t);
    };
  function h(t) {
    for (var e = arguments.length, n = Array(e > 1 ? e - 1 : 0), r = 1; r < e; r++) n[r - 1] = arguments[r];
    return Object.assign.apply(Object, [Object.create(Object.getPrototypeOf(t)), t].concat(u(n)));
  }
  function p() {
    for (var t = arguments.length, e = Array(t), n = 0; n < t; n++) e[n] = arguments[n];
    return e
      .filter(function(t) {
        return t || 0 === t;
      })
      .map(function(t, e) {
        return 0 === e ? t : '[' + t + ']';
      })
      .join('');
  }
  var f = (function(t) {
    function e() {
      var t, n, o;
      r(this, e);
      for (var i = arguments.length, a = Array(i), c = 0; c < i; c++) a[c] = arguments[c];
      return (
        (n = o = s(this, (t = e.__proto__ || Object.getPrototypeOf(e)).call.apply(t, [this].concat(a)))),
        (o.handleChange = function(t, e, n) {
          o.onChange(t, e, n);
        }),
        s(o, n)
      );
    }
    return (
      c(e, t),
      o(e, [
        {
          key: 'getChildContext',
          value: function() {
            return {
              object: this.props.for,
              schema: this.getSchema(),
              prefix: this.getPrefix(),
              onChange: this.handleChange
            };
          }
        },
        {
          key: 'getPrefix',
          value: function() {
            return p(this.context.prefix, this.context.name, this.props.prefix, this.props.index);
          }
        },
        {
          key: 'getSchema',
          value: function() {
            return this.props.schema || this.props.for.schema || this.throwUndefinedSchema();
          }
        },
        {
          key: 'getNewObjectFor',
          value: function(t, e, n) {
            if (void 0 === n) return h(this.props.for, i({}, t, e));
            var r = this.props.for[t],
              o = void 0;
            return (
              Array.isArray(r) ? ((o = [].concat(u(r)))[n] = e) : (o = h(r, i({}, n, e))),
              h(this.props.for, i({}, t, o))
            );
          }
        },
        {
          key: 'dispatchChange',
          value: function(t) {
            this.context.name ? this.dispatchNestedChange(t) : this.dispatchFormChange(t);
          }
        },
        {
          key: 'dispatchNestedChange',
          value: function(t) {
            this.context.onChange(this.context.name, t, this.props.index);
          }
        },
        {
          key: 'dispatchFormChange',
          value: function(t) {
            this.context.onChange(t);
          }
        },
        {
          key: 'onChange',
          value: function(t, e, n) {
            var r = this.getNewObjectFor(t, e, n);
            this.dispatchChange(r);
          }
        },
        {
          key: 'render',
          value: function() {
            return this.props.children || null;
          }
        },
        {
          key: 'throwUndefinedSchema',
          value: function() {
            var t = this.props.for.constructor.name;
            throw new Error('Undefined schema for "' + t + '" instance');
          }
        }
      ]),
      e
    );
  })(e.Component);
  (f.contextTypes = { onChange: n.func.isRequired, name: n.string }),
    (f.childContextTypes = { object: n.object, schema: n.object, prefix: n.string, onChange: n.func });
  var l = (function(t) {
    function n() {
      var t, e, o;
      r(this, n);
      for (var i = arguments.length, a = Array(i), c = 0; c < i; c++) a[c] = arguments[c];
      return (
        (e = o = s(this, (t = n.__proto__ || Object.getPrototypeOf(n)).call.apply(t, [this].concat(a)))),
        (o.handleChange = function(t) {
          o.onChange(t);
        }),
        (o.handleSubmit = function(t) {
          var e = o.props.onSubmit;
          e && e(t, o.getData());
        }),
        s(o, e)
      );
    }
    return (
      c(n, t),
      o(n, [
        {
          key: 'getChildContext',
          value: function() {
            return {
              onChange: this.handleChange,
              touchOnMount: !!this.props.touchOnMount,
              noValidate: !!this.props.noValidate
            };
          }
        },
        {
          key: 'getData',
          value: function() {
            return this.props.for || {};
          }
        },
        {
          key: 'getForm',
          value: function() {
            return this.form || this.throwUndefinedForm();
          }
        },
        {
          key: 'onChange',
          value: function(t) {
            var e = this.props.onChange;
            e && e(this.getData());
          }
        },
        {
          key: 'render',
          value: function() {
            var t = this,
              n = a({}, this.props),
              r = n.for,
              o = n.schema,
              i = n.children,
              c = (function(t, e) {
                var n = {};
                for (var r in t) e.indexOf(r) >= 0 || (Object.prototype.hasOwnProperty.call(t, r) && (n[r] = t[r]));
                return n;
              })(n, ['for', 'schema', 'children']);
            delete c.onChange, delete c.touchOnMount;
            var s = void 0;
            return (
              (s = r
                ? e.createElement(this.constructor.fieldGroupComponent, { for: this.getData(), schema: o, children: i })
                : i),
              e.createElement(
                'form',
                a({}, c, {
                  ref: function(e) {
                    return (t.form = e);
                  },
                  onSubmit: this.handleSubmit
                }),
                s
              )
            );
          }
        },
        {
          key: 'throwUndefinedForm',
          value: function() {
            throw new Error('Undefined form HTML element');
          }
        }
      ]),
      n
    );
  })(e.Component);
  (l.fieldGroupComponent = f), (l.childContextTypes = { onChange: n.func, touchOnMount: n.bool, noValidate: n.bool });
  var d = (function(t) {
      function e(t) {
        r(this, e);
        var n = s(this, (e.__proto__ || Object.getPrototypeOf(e)).call(this, t));
        return (n.data = t.for || {}), n;
      }
      return (
        c(e, l),
        o(e, [
          {
            key: 'getData',
            value: function() {
              return this.data;
            }
          },
          {
            key: 'onChange',
            value: function(t) {
              (this.data = t),
                this.setState({}),
                (function t(e, n, r) {
                  null === e && (e = Function.prototype);
                  var o = Object.getOwnPropertyDescriptor(e, n);
                  if (void 0 === o) {
                    var i = Object.getPrototypeOf(e);
                    return null === i ? void 0 : t(i, n, r);
                  }
                  if ('value' in o) return o.value;
                  var a = o.get;
                  return void 0 !== a ? a.call(r) : void 0;
                })(e.prototype.__proto__ || Object.getPrototypeOf(e.prototype), 'onChange', this).call(this, t);
            }
          }
        ]),
        e
      );
    })(),
    y = (function(t) {
      function n() {
        var t, e, o;
        r(this, n);
        for (var i = arguments.length, a = Array(i), c = 0; c < i; c++) a[c] = arguments[c];
        return (
          (e = o = s(this, (t = n.__proto__ || Object.getPrototypeOf(n)).call.apply(t, [this].concat(a)))),
          (o.handleMount = function(t) {
            (o.target = t), o.forceUpdate();
          }),
          (o.handleFocus = function(t) {
            (o.target = (t || {}).target || o.target), o.touchAndRender(), o.props.onFocus && o.props.onFocus(t);
          }),
          (o.handleChange = function(t, e, n) {
            (o.target = (t || {}).target || o.target),
              o.setValue(e),
              o.touch(),
              o.props.onChange && o.props.onChange(t);
          }),
          s(o, e)
        );
      }
      return (
        c(n, t),
        o(
          n,
          [
            {
              key: 'getChildContext',
              value: function() {
                return { name: this.props.name };
              }
            },
            {
              key: 'getContextObject',
              value: function() {
                return this.context.object;
              }
            },
            {
              key: 'getContextObjectValue',
              value: function() {
                return this.getContextObject()[this.props.name];
              }
            },
            {
              key: 'getSchemaProperty',
              value: function() {
                var t = this.context.schema[this.props.name];
                return t || this.warnMissingSchemaProperty(), t || {};
              }
            },
            {
              key: 'getType',
              value: function() {
                return this.props.type || this.getSchemaProperty().type || 'text';
              }
            },
            {
              key: 'getPrefixedName',
              value: function() {
                return p(this.context.prefix, this.props.name);
              }
            },
            {
              key: 'getComponent',
              value: function() {
                return n.connectedComponents[this.getType()] || this.throwMissingTypeConnection();
              }
            },
            {
              key: 'getValue',
              value: function(t) {
                return void 0 !== t ? t : this.getTargetValue();
              }
            },
            {
              key: 'getTargetValue',
              value: function() {
                return 'checkbox' === this.target.type ? this.target.checked : this.target.value;
              }
            },
            {
              key: 'isTouched',
              value: function() {
                return this.touched || this.context.touchOnMount;
              }
            },
            {
              key: 'getError',
              value: function(t) {
                if (this.context.noValidate) return null;
                if (this.props.error) return this.props.error;
                var e = this.getSchemaProperty().error;
                return e
                  ? ('string' == typeof e && (e = this.context.object[e]),
                    'function' == typeof e ? e.bind(this.context.object)(this.context.object, this.props.name) : e)
                  : this.incomingError || (this.target || {}).validationMessage;
              }
            },
            {
              key: 'setValue',
              value: function(t) {
                this.context.onChange(this.props.name, this.getValue(t));
              }
            },
            {
              key: 'setBrowserCustomValidity',
              value: function(t) {
                this.target &&
                  (Array.isArray(this.target) ? this.target : [this.target]).forEach(function(e) {
                    e.setCustomValidity && e.setCustomValidity(t || '');
                  });
              }
            },
            {
              key: 'clearBrowserCustomValidity',
              value: function() {
                this.setBrowserCustomValidity();
              }
            },
            {
              key: 'touch',
              value: function() {
                this.touched = !0;
              }
            },
            {
              key: 'touchAndRender',
              value: function() {
                this.isTouched() ? this.touch() : (this.touch(), this.forceUpdate());
              }
            },
            {
              key: 'validate',
              value: function(t) {
                this.clearBrowserCustomValidity(), (this.incomingError = t);
                var e = this.getError();
                return this.setBrowserCustomValidity(e), e;
              }
            },
            {
              key: 'render',
              value: function() {
                var t = this.validate();
                return (
                  (t && ('string' != typeof t || t.length)) || (t = null),
                  e.createElement(
                    this.getComponent(),
                    a({}, this.getSchemaProperty(), this.props, {
                      name: this.getPrefixedName(),
                      value: this.getContextObjectValue() || '',
                      error: t,
                      touched: this.isTouched(),
                      onMount: this.handleMount,
                      onFocus: this.handleFocus,
                      onChange: this.handleChange
                    })
                  )
                );
              }
            },
            {
              key: 'warnMissingSchemaProperty',
              value: function() {
                var t = this.props.name,
                  e = this.context.object.constructor.name;
                console.warn('Undefined property "' + t + '" in schema for "' + e + '" instance');
              }
            },
            {
              key: 'throwMissingTypeConnection',
              value: function() {
                var t = this.getType(),
                  e = this.props.name,
                  n = this.context.object.constructor.name;
                throw new Error(
                  'Missing "' + t + '" connection requested for property "' + e + '" in "' + n + '" instance'
                );
              }
            }
          ],
          [
            {
              key: 'connect',
              value: function(t, e) {
                n.connectedComponents[t] = e;
              }
            }
          ]
        ),
        n
      );
    })(e.Component);
  function g(t, e, n, r) {
    t.schema || (t.schema = {}), (t.schema[e] = r), (n.writable = !0);
  }
  (y.connectedComponents = {}),
    (y.contextTypes = {
      object: n.object.isRequired,
      schema: n.object.isRequired,
      prefix: n.string,
      onChange: n.func.isRequired,
      touchOnMount: n.bool.isRequired,
      noValidate: n.bool.isRequired
    }),
    (y.childContextTypes = { name: n.string }),
    (t.BaseForm = l),
    (t.Form = d),
    (t.Field = y),
    (t.FieldGroup = f),
    (t.field = function(t, e, n) {
      return e
        ? g(t, e, n, {})
        : function(e, n, r) {
            return g(e, n, r, t);
          };
    }),
    (t.cloneObject = h),
    Object.defineProperty(t, '__esModule', { value: !0 });
});
//# sourceMappingURL=index.min.js.map
