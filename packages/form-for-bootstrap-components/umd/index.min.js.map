{"version":3,"file":"index.min.js","sources":["../src/Help.js","../src/Checkbox.js","../src/RequiredAbbreviation.js","../src/Label.js","../src/Feedback.js","../src/Input.js","../src/humanizeOptions.js","../src/Radio.js","../src/Select.js","../src/index.js"],"sourcesContent":["// @flow\n\nimport * as React from 'react';\n\ntype Props = {\n  id: ?string,\n  text: ?string\n};\n\nexport default class Help extends React.Component<Props> {\n  render() {\n    if (!this.props.text) return null;\n\n    return (\n      <small id={this.props.id} className=\"form-text text-muted\">\n        {this.props.text}\n      </small>\n    );\n  }\n}\n","// @flow\n\nimport * as React from 'react';\nimport type { ComponentProps } from 'form-for';\nimport { Checkbox as BaseCheckbox } from 'form-for-components';\nimport { help, humanized, uniqueId } from 'form-for-component-helpers';\nimport Help from './Help';\n\nexport type Props = ComponentProps & {\n  label?: any,\n  help?: any\n};\n\nexport default class Checkbox extends React.PureComponent<Props> {\n  render() {\n    const id = uniqueId(this);\n    const humanizedName = humanized(this);\n    const helpProps = help(this);\n\n    const { className, label, ...props } = { ...this.props };\n    delete props.help;\n\n    const inputClasses = ['custom-control-input'];\n    if (props.touched && props.error) inputClasses.push('is-invalid');\n\n    return (\n      <div className={className || 'custom-control custom-checkbox'}>\n        <BaseCheckbox\n          id={id}\n          className={inputClasses.join(' ')}\n          aria-label={label || humanizedName}\n          aria-describedby={helpProps.id}\n          {...props}\n        />\n\n        <label className=\"custom-control-label\" htmlFor={id}>\n          {label !== false && (label || humanizedName)}\n        </label>\n\n        <Help id={helpProps.id} text={helpProps.text} />\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport * as React from 'react';\n\ntype Props = {\n  required?: boolean\n};\n\nexport default class RequiredAbbreviation extends React.Component<Props> {\n  render() {\n    if (!this.props.required) return null;\n\n    return <abbr title=\"required\">*</abbr>;\n  }\n}\n","// @flow\n\nimport * as React from 'react';\nimport RequiredAbbreviation from './RequiredAbbreviation';\n\ntype Props = {\n  for?: string,\n  text?: any,\n  defaultText: string,\n  required?: boolean\n};\n\nexport default class Label extends React.Component<Props> {\n  render() {\n    if (this.props.text === false) return null;\n\n    return (\n      <label htmlFor={this.props.for} className=\"form-control-label\">\n        {this.props.text || this.props.defaultText}\n        <RequiredAbbreviation required={this.props.required} />\n      </label>\n    );\n  }\n}\n","// @flow\n\nimport * as React from 'react';\n\ntype Props = {\n  text: ?string | ?boolean\n};\n\nexport default class Feedback extends React.Component<Props> {\n  render() {\n    if (!this.props.text) return null;\n\n    return <div className=\"invalid-feedback\">{this.props.text}</div>;\n  }\n}\n","// @flow\n\nimport * as React from 'react';\nimport type { ComponentProps } from 'form-for';\nimport { Input as BaseInput } from 'form-for-components';\nimport { help, humanized, uniqueId } from 'form-for-component-helpers';\nimport Label from './Label';\nimport Help from './Help';\nimport Feedback from './Feedback';\n\nexport type Props = ComponentProps & {\n  label?: any,\n  help?: any\n};\n\nexport default class Input extends React.PureComponent<Props> {\n  render() {\n    const id = uniqueId(this);\n    const humanizedName = humanized(this);\n    const helpProps = help(this);\n\n    const { label, className, placeholder, ...props } = { ...this.props };\n    delete props.help;\n\n    const inputClasses = ['form-control'];\n    if (props.touched && props.error) inputClasses.push('is-invalid');\n\n    return (\n      <div className={className || 'form-group'}>\n        <Label for={id} text={label} defaultText={humanizedName} required={props.required} />\n\n        <BaseInput\n          id={id}\n          className={inputClasses.join(' ')}\n          aria-describedby={helpProps.id}\n          placeholder={placeholder || humanizedName}\n          {...props}\n        />\n\n        <Help id={helpProps.id} text={helpProps.text} />\n        <Feedback text={props.error} />\n      </div>\n    );\n  }\n}\n","import { stringHelpers } from 'form-for-component-helpers';\n\ntype Hash = { [key: string]: string };\n\nexport default function humanizeOptions(options: string[] | Hash): Hash {\n  if (!Array.isArray(options)) return options;\n\n  const humanizedOptions = {};\n  options.forEach(option => {\n    humanizedOptions[option] = stringHelpers.humanize(option);\n  });\n\n  return humanizedOptions;\n}\n","// @flow\n\nimport * as React from 'react';\nimport { Radio as BaseRadio, type RadioProps } from 'form-for-components';\nimport { help, humanized, uniqueId } from 'form-for-component-helpers';\nimport humanizeOptions from './humanizeOptions';\nimport Label from './Label';\nimport Help from './Help';\nimport Feedback from './Feedback';\n\nexport type Props = {\n  label?: any,\n  help?: any\n} & RadioProps;\n\nexport default class Radio extends React.PureComponent<Props> {\n  render() {\n    const humanizedName = humanized(this);\n    const helpProps = help(this);\n\n    const { label, className, options, ...props } = { ...this.props };\n    delete props.help;\n\n    const inputClasses = ['custom-control-input'];\n    if (props.touched && props.error) inputClasses.push('is-invalid');\n\n    return (\n      <div className={className || 'form-group'}>\n        <header>\n          <Label text={label} defaultText={humanizedName} required={props.required} />\n        </header>\n\n        <BaseRadio\n          className={inputClasses.join(' ')}\n          map={this.renderRadio}\n          options={humanizeOptions(options)}\n          {...props}\n        />\n\n        <Help id={helpProps.id} text={helpProps.text} />\n\n        {/* Workaround for Bootstrap 4 issue - https://github.com/twbs/bootstrap/issues/24624 */}\n        <div aria-hidden=\"true\" className=\"form-control is-invalid\" style={{ display: 'none' }} />\n        <Feedback text={props.error} />\n      </div>\n    );\n  }\n\n  renderRadio = (props: Object, label: string) => {\n    const id = `${uniqueId(this)}-${props.value}`;\n\n    return (\n      <div key={props.value} className=\"custom-control custom-radio\">\n        <input id={id} {...props} />\n        <label className=\"custom-control-label\" htmlFor={id}>\n          {label}\n        </label>\n      </div>\n    );\n  };\n}\n","// @flow\n\nimport * as React from 'react';\nimport { Select as BaseSelect } from 'form-for-components';\nimport type { SelectProps } from 'form-for-components';\nimport { help, humanized, uniqueId } from 'form-for-component-helpers';\nimport humanizeOptions from './humanizeOptions';\nimport Label from './Label';\nimport Help from './Help';\nimport Feedback from './Feedback';\n\nexport type Props = {\n  label?: any,\n  help?: any\n} & SelectProps;\n\nexport default class Select extends React.PureComponent<Props> {\n  render() {\n    const id = uniqueId(this);\n    const humanizedName = humanized(this);\n    const helpProps = help(this);\n\n    const { label, className, options, ...props } = { ...this.props };\n    delete props.help;\n\n    const selectClasses = ['form-control'];\n    if (props.touched && props.error) selectClasses.push('is-invalid');\n\n    return (\n      <div className={className || 'form-group'}>\n        <Label for={id} text={label} defaultText={humanizedName} required={props.required} />\n\n        <BaseSelect\n          id={id}\n          className={selectClasses.join(' ')}\n          aria-describedby={helpProps.id}\n          options={humanizeOptions(options)}\n          {...props}\n        />\n\n        <Help id={helpProps.id} text={helpProps.text} />\n        <Feedback text={props.error} />\n      </div>\n    );\n  }\n}\n","// @flow\n\nimport { Field } from 'form-for';\nimport { inputTypes } from 'form-for-components';\n\nimport Checkbox from './Checkbox';\nexport type { Props as CheckboxProps } from './Checkbox';\n\nimport Input from './Input';\nexport type { Props as InputProps } from './Input';\n\nimport Radio from './Radio';\nexport type { Props as RadioProps } from './Radio';\n\nimport Select from './Select';\nexport type { Props as SelectProps } from './Select';\n\nimport Feedback from './Feedback';\nimport Help from './Feedback';\nimport Label from './Label';\nimport RequiredAbbreviation from './RequiredAbbreviation';\nimport humanizeOptions from './humanizeOptions';\n\nfunction connectFields() {\n  Field.connect('checkbox', Checkbox);\n  Field.connect('radio', Radio);\n  Field.connect('select', Select);\n  inputTypes.forEach(type => Field.connect(type, Input));\n}\n\nexport { connectFields, Checkbox, Input, Radio, Select, Feedback, Help, Label, RequiredAbbreviation, humanizeOptions };\n"],"names":["Help","this","props","text","React.createElement","id","className","React","Checkbox","uniqueId","humanizedName","humanized","helpProps","help","label","inputClasses","touched","error","push","BaseCheckbox","join","htmlFor","RequiredAbbreviation","required","title","Label","for","defaultText","Feedback","Input","placeholder","BaseInput","humanizeOptions","options","Array","isArray","humanizedOptions","forEach","option","stringHelpers","humanize","Radio","renderRadio","value","key","BaseRadio","aria-hidden","style","display","Select","selectClasses","BaseSelect","connect","Field","type"],"mappings":"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"}